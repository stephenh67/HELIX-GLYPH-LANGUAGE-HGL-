name: ci

on:
  push:
  pull_request:

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (jq, shellcheck, bc) + Python libs
        run: |
          sudo apt-get update
          sudo apt-get install -y jq shellcheck bc
          python -m pip install --upgrade pip
          python -m pip install jsonschema

      - name: Lint bash
        run: shellcheck tools/verify_and_eval.sh

      - name: Check EBNF exists
        run: test -s spec/grammar.ebnf

      - name: Validate example sentence against schema
        run: |
          python <<'EOF'
          import json, jsonschema
          with open('schema/COOP_SENTENCE.schema.json') as f: schema=json.load(f)
          with open('examples/001_consent_access.compiled.json') as f: data=json.load(f)
          jsonschema.validate(data, schema)
          print("COOP_SENTENCE OK")
          EOF

      - name: Build sample SYNERGY_PROOF from events
        run: |
          RUN_ID="ci-$(date +%s)"
          MODEL="CI" ROUTE="ci/run" RUN_ID="$RUN_ID" \
          jq -s -f tools/synergy_reduce.jq examples/events.sample.jsonl > proof.json
          jq -e '.envelope_type=="SYNERGY_PROOF"' proof.json

      - name: Canonicalize + hash artifacts
        run: |
          jq -S . examples/001_consent_access.compiled.json > sentence.canon.json
          jq -S . proof.json > proof.canon.json
          sha256sum sentence.canon.json proof.canon.json

      - name: Dry-run verifier (no keys -> signatures: unknown)
        run: |
          chmod +x tools/verify_and_eval.sh
          touch EMPTY_ALLOWED_SIGNERS
          tools/verify_and_eval.sh \
            examples/001_consent_access.compiled.json \
            proof.json \
            ./EMPTY_ALLOWED_SIGNERS \
            ledger-root | jq .
